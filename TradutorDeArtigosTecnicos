#using colab.research.google.com

pip install requests beautifulsoup4 openai langchain-openai

---------------------------------------------------------------------


import requests
from bs4 import BeautifulSoup

def extract_text_from_url(url):
    try:
        response = requests.get(url)

        if response.status_code != 200:
            print(f"Failed to fetch URL. Status code: {response.status_code}")
            return None
        else:
          soup = BeautifulSoup(response.text, 'html.parser')
          for script_or_style in soup(["script", "style"]):
            script_or_style.extract()
          text = soup.get_text(separator = ' ')
          lines = (line.strip() for line in text.splitlines())
          chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
          clean_text = '\n'.join(chunk for chunk in chunks if chunk)
          return clean_text

        soup = BeautifulSoup(response.text, 'html.parser')
        text = soup.get_text()
        return text
    except Exception as e:
        print(f"Error extracting text from URL: {e}")
        return None


extract_text_from_url("https://dev.to/grahamthedev/true-alphanumeric-natural-sorting-in-mysql-why-is-the-answer-always-recursion-2b4a")


------------------------------------------------------------------------

from langchain_openai.chat_models.azure import AzureChatOpenAI


client = AzureChatOpenAI(
    azure_endpoint= "Seu Endpoint", #nome criado em ai.azure.com/resource nome do rescurso AzureOpenAI, portal.azure.com - resources - Keys and Endpoint
    api_key = "Sua API KEY", # portal.azure.com - resources - Keys and Endpoint
    api_version= "versão de sua API", # ai.azure.com/resource   >implantações temos nome do modelo e versão
    deployment_name = "gpt-4o-mini", # ai.azure.com/resource   >implantações 
    max_retries = 0  # ai.azure.com/resource   >implantações  é possível ver o "limite de taxa(tokens por minuto)" , se ultrapassar terá que pagar
)

def translate_article(text, lang):
  messages = [
      ("system", "Você atua como tradutor de textos")
      ("user", f"Traduza o {text} para o idioma {lang} e responda em markdown")
  ]

  response = client.invoke(messages)
  return response.message.content

----------------------------------------------------

url ='https://dev.to/grahamthedev/true-alphanumeric-natural-sorting-in-mysql-why-is-the-answer-always-recursion-2b4a'
text = extract_text_from_url(url)
article = translate_article(text, "português")

print(article)
